// Code generated by goa v3.7.6, DO NOT EDIT.
//
// GameManagement views
//
// Command:
// $ goa gen github.com/akasinan/game-library/game_management_service/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Game is the viewed result type that is projected based on a view.
type Game struct {
	// Type to project
	Projected *GameView
	// View to render
	View string
}

// GameList is the viewed result type that is projected based on a view.
type GameList struct {
	// Type to project
	Projected *GameListView
	// View to render
	View string
}

// GameView is a type that runs validations on a projected type.
type GameView struct {
	// ID of the game in the Postgres database
	ID *uint64
	// Name of the game
	Name *string
	// Initial release date of game
	ReleaseDate *string
	// An array of genres the game falls under
	Genre []string
	// A list of Platforms the game has been released on. Consoles/PC etc.
	Platforms []string
	// Name of Game’s developer
	Developer *string
	// Name of Game’s publisher
	Publisher *string
	// Game creation timestamp
	CreatedAt *string
	// Game last updated timestamp
	UpdatedAt *string
}

// GameListView is a type that runs validations on a projected type.
type GameListView struct {
	// List of games
	Values GameCollectionView
}

// GameCollectionView is a type that runs validations on a projected type.
type GameCollectionView []*GameView

var (
	// GameMap is a map indexing the attribute names of Game by view name.
	GameMap = map[string][]string{
		"default": {
			"id",
			"name",
			"release_date",
			"genre",
			"platforms",
			"developer",
			"publisher",
			"created_at",
			"updated_at",
		},
	}
	// GameListMap is a map indexing the attribute names of GameList by view name.
	GameListMap = map[string][]string{
		"default": {
			"values",
		},
	}
	// GameCollectionMap is a map indexing the attribute names of GameCollection by
	// view name.
	GameCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
			"release_date",
			"genre",
			"platforms",
			"developer",
			"publisher",
			"created_at",
			"updated_at",
		},
	}
)

// ValidateGame runs the validations defined on the viewed result type Game.
func ValidateGame(result *Game) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGameView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGameList runs the validations defined on the viewed result type
// GameList.
func ValidateGameList(result *GameList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGameListView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateGameView runs the validations defined on GameView using the
// "default" view.
func ValidateGameView(result *GameView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	if result.ReleaseDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.release_date", *result.ReleaseDate, goa.FormatDateTime))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGameListView runs the validations defined on GameListView using the
// "default" view.
func ValidateGameListView(result *GameListView) (err error) {

	if result.Values != nil {
		if err2 := ValidateGameCollectionView(result.Values); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGameCollectionView runs the validations defined on
// GameCollectionView using the "default" view.
func ValidateGameCollectionView(result GameCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateGameView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
