// Code generated by goa v3.7.6, DO NOT EDIT.
//
// GameManagement HTTP client CLI support package
//
// Command:
// $ goa gen github.com/akasinan/game-library/game_management_service/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	gamemanagement "github.com/akasinan/game-library/game_management_service/gen/game_management"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the GameManagement create endpoint
// from CLI flags.
func BuildCreatePayload(gameManagementCreateBody string) (*gamemanagement.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(gameManagementCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"developer\": \"some-developer\",\n      \"genre\": [\n         \"some-genre\",\n         \"some-genre\",\n         \"some-genre\"\n      ],\n      \"name\": \"some-game\",\n      \"platforms\": [\n         \"some-platform\",\n         \"some-platform\"\n      ],\n      \"publisher\": \"some-publisher\",\n      \"release_date\": \"1994-05-17T20:31:16Z\"\n   }'")
		}
		if body.ReleaseDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.release_date", *body.ReleaseDate, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &gamemanagement.CreatePayload{
		Name:        body.Name,
		ReleaseDate: body.ReleaseDate,
		Developer:   body.Developer,
		Publisher:   body.Publisher,
	}
	if body.Genre != nil {
		v.Genre = make([]string, len(body.Genre))
		for i, val := range body.Genre {
			v.Genre[i] = val
		}
	}
	if body.Platforms != nil {
		v.Platforms = make([]string, len(body.Platforms))
		for i, val := range body.Platforms {
			v.Platforms[i] = val
		}
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the GameManagement update endpoint
// from CLI flags.
func BuildUpdatePayload(gameManagementUpdateBody string, gameManagementUpdateID string) (*gamemanagement.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(gameManagementUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"developer\": \"some-developer\",\n      \"genre\": [\n         \"some-genre\",\n         \"some-genre\",\n         \"some-genre\"\n      ],\n      \"platforms\": [\n         \"some-platform\",\n         \"some-platform\",\n         \"some-platform\",\n         \"some-platform\"\n      ],\n      \"publisher\": \"some-publisher\",\n      \"release_date\": \"1971-01-04T03:55:57Z\"\n   }'")
		}
		if body.ReleaseDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.release_date", *body.ReleaseDate, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint64
	{
		id, err = strconv.ParseUint(gameManagementUpdateID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &gamemanagement.UpdatePayload{
		ReleaseDate: body.ReleaseDate,
		Developer:   body.Developer,
		Publisher:   body.Publisher,
	}
	if body.Genre != nil {
		v.Genre = make([]string, len(body.Genre))
		for i, val := range body.Genre {
			v.Genre[i] = val
		}
	}
	if body.Platforms != nil {
		v.Platforms = make([]string, len(body.Platforms))
		for i, val := range body.Platforms {
			v.Platforms[i] = val
		}
	}
	v.ID = id

	return v, nil
}

// BuildShowPayload builds the payload for the GameManagement show endpoint
// from CLI flags.
func BuildShowPayload(gameManagementShowID string) (*gamemanagement.ShowPayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(gameManagementShowID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &gamemanagement.ShowPayload{}
	v.ID = id

	return v, nil
}

// BuildIndexPayload builds the payload for the GameManagement index endpoint
// from CLI flags.
func BuildIndexPayload(gameManagementIndexFilter string) (*gamemanagement.IndexPayload, error) {
	var err error
	var filter string
	{
		filter = gameManagementIndexFilter
		if utf8.RuneCountInString(filter) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("filter", filter, utf8.RuneCountInString(filter), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &gamemanagement.IndexPayload{}
	v.Filter = filter

	return v, nil
}

// BuildDeletePayload builds the payload for the GameManagement delete endpoint
// from CLI flags.
func BuildDeletePayload(gameManagementDeleteID string) (*gamemanagement.DeletePayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(gameManagementDeleteID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
		if id < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("id", id, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &gamemanagement.DeletePayload{}
	v.ID = id

	return v, nil
}
