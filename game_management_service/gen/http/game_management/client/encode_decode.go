// Code generated by goa v3.7.6, DO NOT EDIT.
//
// GameManagement HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/akasinan/game-library/game_management_service/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	gamemanagement "github.com/akasinan/game-library/game_management_service/gen/game_management"
	gamemanagementviews "github.com/akasinan/game-library/game_management_service/gen/game_management/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "GameManagement" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateGameManagementPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GameManagement", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the
// GameManagement create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*gamemanagement.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("GameManagement", "create", "*gamemanagement.CreatePayload", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("GameManagement", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// GameManagement create endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				location *string
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw != "" {
				location = &locationRaw
			}
			res := NewCreateResultCreated(location)
			return res, nil
		case http.StatusConflict:
			var (
				body CreateConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "create", err)
			}
			err = ValidateCreateConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "create", err)
			}
			return nil, NewCreateConflict(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "create", err)
			}
			err = ValidateCreateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "create", err)
			}
			return nil, NewCreateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body CreateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "create", err)
			}
			err = ValidateCreateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "create", err)
			}
			return nil, NewCreateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body CreateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "create", err)
			}
			err = ValidateCreateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "create", err)
			}
			return nil, NewCreateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body CreateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "create", err)
			}
			err = ValidateCreateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "create", err)
			}
			return nil, NewCreateInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GameManagement", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "GameManagement" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*gamemanagement.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GameManagement", "update", "*gamemanagement.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateGameManagementPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GameManagement", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the
// GameManagement update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*gamemanagement.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("GameManagement", "update", "*gamemanagement.UpdatePayload", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("GameManagement", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// GameManagement update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body UpdateBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "update", err)
			}
			err = ValidateUpdateBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "update", err)
			}
			return nil, NewUpdateBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "update", err)
			}
			err = ValidateUpdateInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "update", err)
			}
			return nil, NewUpdateInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GameManagement", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "GameManagement" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*gamemanagement.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GameManagement", "show", "*gamemanagement.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowGameManagementPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GameManagement", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowResponse returns a decoder for responses returned by the
// GameManagement show endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			p := NewShowGameOK(&body)
			view := "default"
			vres := &gamemanagementviews.Game{Projected: p, View: view}
			if err = gamemanagementviews.ValidateGame(vres); err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			res := gamemanagement.NewGame(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			err = ValidateShowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			return nil, NewShowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ShowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			err = ValidateShowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			return nil, NewShowForbidden(&body)
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body ShowBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			err = ValidateShowBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			return nil, NewShowBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GameManagement", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildIndexRequest instantiates a HTTP request object with method and path
// set to call the "GameManagement" service "index" endpoint
func (c *Client) BuildIndexRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IndexGameManagementPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GameManagement", "index", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIndexRequest returns an encoder for requests sent to the
// GameManagement index server.
func EncodeIndexRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*gamemanagement.IndexPayload)
		if !ok {
			return goahttp.ErrInvalidType("GameManagement", "index", "*gamemanagement.IndexPayload", v)
		}
		values := req.URL.Query()
		values.Add("filter", p.Filter)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIndexResponse returns a decoder for responses returned by the
// GameManagement index endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeIndexResponse may return the following errors:
//	- "unprocessable_entity" (type *goa.ServiceError): http.StatusUnprocessableEntity
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeIndexResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IndexResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			p := NewIndexGameListOK(&body)
			view := "default"
			vres := &gamemanagementviews.GameList{Projected: p, View: view}
			if err = gamemanagementviews.ValidateGameList(vres); err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			res := gamemanagement.NewGameList(vres)
			return res, nil
		case http.StatusUnprocessableEntity:
			var (
				body IndexUnprocessableEntityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			err = ValidateIndexUnprocessableEntityResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			return nil, NewIndexUnprocessableEntity(&body)
		case http.StatusUnauthorized:
			var (
				body IndexUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			err = ValidateIndexUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			return nil, NewIndexUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body IndexForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			err = ValidateIndexForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			return nil, NewIndexForbidden(&body)
		case http.StatusBadRequest:
			var (
				body IndexBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			err = ValidateIndexBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			return nil, NewIndexBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body IndexBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			err = ValidateIndexBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			return nil, NewIndexBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body IndexInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "index", err)
			}
			err = ValidateIndexInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "index", err)
			}
			return nil, NewIndexInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GameManagement", "index", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "GameManagement" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*gamemanagement.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GameManagement", "delete", "*gamemanagement.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteGameManagementPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GameManagement", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// GameManagement delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad_gateway" (type *goa.ServiceError): http.StatusBadGateway
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		case http.StatusBadGateway:
			var (
				body DeleteBadGatewayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "delete", err)
			}
			err = ValidateDeleteBadGatewayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "delete", err)
			}
			return nil, NewDeleteBadGateway(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GameManagement", "delete", err)
			}
			err = ValidateDeleteInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GameManagement", "delete", err)
			}
			return nil, NewDeleteInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GameManagement", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGameResponseBodyToGamemanagementviewsGameView builds a value of
// type *gamemanagementviews.GameView from a value of type *GameResponseBody.
func unmarshalGameResponseBodyToGamemanagementviewsGameView(v *GameResponseBody) *gamemanagementviews.GameView {
	res := &gamemanagementviews.GameView{
		ID:          v.ID,
		Name:        v.Name,
		ReleaseDate: v.ReleaseDate,
		Developer:   v.Developer,
		Publisher:   v.Publisher,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
	}
	if v.Genre != nil {
		res.Genre = make([]string, len(v.Genre))
		for i, val := range v.Genre {
			res.Genre[i] = val
		}
	}
	if v.Platforms != nil {
		res.Platforms = make([]string, len(v.Platforms))
		for i, val := range v.Platforms {
			res.Platforms[i] = val
		}
	}

	return res
}
